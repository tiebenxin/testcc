package com.lensim.fingerchat.hexmeet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MEETING_USER_".
 */
public class MeetingUser_Dao extends AbstractDao<MeetingUser_, Long> {

  public static final String TABLENAME = "MEETING_USER_";

  /**
   * Properties of entity MeetingUser_.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {

    public final static Property Id = new Property(0, Long.class, "id", true, "_id");
    public final static Property MeetingId = new Property(1, Long.class, "meetingId", false, "MEETING_ID");
    public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
  }

  ;

  private DaoSession daoSession;

  private Query<MeetingUser_> restMeeting__MeetingUsersQuery;

  public MeetingUser_Dao(DaoConfig config) {
    super(config);
  }

  public MeetingUser_Dao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
    this.daoSession = daoSession;
  }

  /**
   * Creates the underlying database table.
   */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"MEETING_USER_\" (" + //
        "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
        "\"MEETING_ID\" INTEGER," + // 1: meetingId
        "\"USER_ID\" INTEGER);"); // 2: userId
  }

  /**
   * Drops the underlying database table.
   */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEETING_USER_\"";
    db.execSQL(sql);
  }

  /**
   * @inheritdoc
   */
  @Override
  protected void bindValues(SQLiteStatement stmt, MeetingUser_ entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }

    Long meetingId = entity.getMeetingId();
    if (meetingId != null) {
      stmt.bindLong(2, meetingId);
    }

    Long userId = entity.getUserId();
    if (userId != null) {
      stmt.bindLong(3, userId);
    }
  }

  @Override
  protected void attachEntity(MeetingUser_ entity) {
    super.attachEntity(entity);
    entity.__setDaoSession(daoSession);
  }

  /**
   * @inheritdoc
   */
  @Override
  public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  /**
   * @inheritdoc
   */
  @Override
  public MeetingUser_ readEntity(Cursor cursor, int offset) {
    MeetingUser_ entity = new MeetingUser_( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
        cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // meetingId
        cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // userId
    );
    return entity;
  }

  /**
   * @inheritdoc
   */
  @Override
  public void readEntity(Cursor cursor, MeetingUser_ entity, int offset) {
    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setMeetingId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
    entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
  }

  /**
   * @inheritdoc
   */
  @Override
  protected Long updateKeyAfterInsert(MeetingUser_ entity, long rowId) {
    entity.setId(rowId);
    return rowId;
  }

  /**
   * @inheritdoc
   */
  @Override
  public Long getKey(MeetingUser_ entity) {
    if (entity != null) {
      return entity.getId();
    } else {
      return null;
    }
  }

  /**
   * @inheritdoc
   */
  @Override
  protected boolean isEntityUpdateable() {
    return true;
  }

  /**
   * Internal query to resolve the "meetingUsers" to-many relationship of RestMeeting_.
   */
  public List<MeetingUser_> _queryRestMeeting__MeetingUsers(Long meetingId) {
    synchronized (this) {
      if (restMeeting__MeetingUsersQuery == null) {
        QueryBuilder<MeetingUser_> queryBuilder = queryBuilder();
        queryBuilder.where(Properties.MeetingId.eq(null));
        restMeeting__MeetingUsersQuery = queryBuilder.build();
      }
    }
    Query<MeetingUser_> query = restMeeting__MeetingUsersQuery.forCurrentThread();
    query.setParameter(0, meetingId);
    return query.list();
  }

  private String selectDeep;

  protected String getSelectDeep() {
    if (selectDeep == null) {
      StringBuilder builder = new StringBuilder("SELECT ");
      SqlUtils.appendColumns(builder, "T", getAllColumns());
      builder.append(',');
      SqlUtils.appendColumns(builder, "T0", daoSession.getRestUser_Dao().getAllColumns());
      builder.append(',');
      SqlUtils.appendColumns(builder, "T1", daoSession.getRestMeeting_Dao().getAllColumns());
      builder.append(" FROM MEETING_USER_ T");
      builder.append(" LEFT JOIN REST_USER_ T0 ON T.\"USER_ID\"=T0.\"_id\"");
      builder.append(" LEFT JOIN REST_MEETING_ T1 ON T.\"MEETING_ID\"=T1.\"_id\"");
      builder.append(' ');
      selectDeep = builder.toString();
    }
    return selectDeep;
  }

  protected MeetingUser_ loadCurrentDeep(Cursor cursor, boolean lock) {
    MeetingUser_ entity = loadCurrent(cursor, 0, lock);
    int offset = getAllColumns().length;

    RestUser_ user = loadCurrentOther(daoSession.getRestUser_Dao(), cursor, offset);
    entity.setUser(user);
    offset += daoSession.getRestUser_Dao().getAllColumns().length;

    RestMeeting_ meeting = loadCurrentOther(daoSession.getRestMeeting_Dao(), cursor, offset);
    entity.setMeeting(meeting);

    return entity;
  }

  public MeetingUser_ loadDeep(Long key) {
    assertSinglePk();
    if (key == null) {
      return null;
    }

    StringBuilder builder = new StringBuilder(getSelectDeep());
    builder.append("WHERE ");
    SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
    String sql = builder.toString();

    String[] keyArray = new String[]{key.toString()};
    Cursor cursor = db.rawQuery(sql, keyArray);

    try {
      boolean available = cursor.moveToFirst();
      if (!available) {
        return null;
      } else if (!cursor.isLast()) {
        throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
      }
      return loadCurrentDeep(cursor, true);
    } finally {
      cursor.close();
    }
  }

  /**
   * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
   */
  public List<MeetingUser_> loadAllDeepFromCursor(Cursor cursor) {
    int count = cursor.getCount();
    List<MeetingUser_> list = new ArrayList<MeetingUser_>(count);

    if (cursor.moveToFirst()) {
      if (identityScope != null) {
        identityScope.lock();
        identityScope.reserveRoom(count);
      }
      try {
        do {
          list.add(loadCurrentDeep(cursor, false));
        } while (cursor.moveToNext());
      } finally {
        if (identityScope != null) {
          identityScope.unlock();
        }
      }
    }
    return list;
  }

  protected List<MeetingUser_> loadDeepAllAndCloseCursor(Cursor cursor) {
    try {
      return loadAllDeepFromCursor(cursor);
    } finally {
      cursor.close();
    }
  }


  /**
   * A raw-style query where you can pass any WHERE clause and arguments.
   */
  public List<MeetingUser_> queryDeep(String where, String... selectionArg) {
    Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
    return loadDeepAllAndCloseCursor(cursor);
  }

}
