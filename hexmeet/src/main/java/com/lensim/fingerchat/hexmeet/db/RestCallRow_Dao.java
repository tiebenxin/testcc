package com.lensim.fingerchat.hexmeet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "REST_CALL_ROW_".
 */
public class RestCallRow_Dao extends AbstractDao<RestCallRow_, Long> {

  public static final String TABLENAME = "REST_CALL_ROW_";

  /**
   * Properties of entity RestCallRow_.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {

    public final static Property Id = new Property(0, Long.class, "id", true, "_id");
    public final static Property PeerSipNum = new Property(1, String.class, "peerSipNum", false, "PEER_SIP_NUM");
    public final static Property IsOutgoing = new Property(2, Boolean.class, "isOutgoing", false, "IS_OUTGOING");
    public final static Property IsVideoCall = new Property(3, Boolean.class, "isVideoCall", false, "IS_VIDEO_CALL");
    public final static Property StartTime = new Property(4, Long.class, "startTime", false, "START_TIME");
    public final static Property Duration = new Property(5, Long.class, "duration", false, "DURATION");
  }

  ;


  public RestCallRow_Dao(DaoConfig config) {
    super(config);
  }

  public RestCallRow_Dao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
  }

  /**
   * Creates the underlying database table.
   */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"REST_CALL_ROW_\" (" + //
        "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
        "\"PEER_SIP_NUM\" TEXT," + // 1: peerSipNum
        "\"IS_OUTGOING\" INTEGER," + // 2: isOutgoing
        "\"IS_VIDEO_CALL\" INTEGER," + // 3: isVideoCall
        "\"START_TIME\" INTEGER," + // 4: startTime
        "\"DURATION\" INTEGER);"); // 5: duration
  }

  /**
   * Drops the underlying database table.
   */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REST_CALL_ROW_\"";
    db.execSQL(sql);
  }

  /**
   * @inheritdoc
   */
  @Override
  protected void bindValues(SQLiteStatement stmt, RestCallRow_ entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }

    String peerSipNum = entity.getPeerSipNum();
    if (peerSipNum != null) {
      stmt.bindString(2, peerSipNum);
    }

    Boolean isOutgoing = entity.getIsOutgoing();
    if (isOutgoing != null) {
      stmt.bindLong(3, isOutgoing ? 1L : 0L);
    }

    Boolean isVideoCall = entity.getIsVideoCall();
    if (isVideoCall != null) {
      stmt.bindLong(4, isVideoCall ? 1L : 0L);
    }

    Long startTime = entity.getStartTime();
    if (startTime != null) {
      stmt.bindLong(5, startTime);
    }

    Long duration = entity.getDuration();
    if (duration != null) {
      stmt.bindLong(6, duration);
    }
  }

  /**
   * @inheritdoc
   */
  @Override
  public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  /**
   * @inheritdoc
   */
  @Override
  public RestCallRow_ readEntity(Cursor cursor, int offset) {
    RestCallRow_ entity = new RestCallRow_( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // peerSipNum
        cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isOutgoing
        cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isVideoCall
        cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // startTime
        cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // duration
    );
    return entity;
  }

  /**
   * @inheritdoc
   */
  @Override
  public void readEntity(Cursor cursor, RestCallRow_ entity, int offset) {
    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setPeerSipNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    entity.setIsOutgoing(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
    entity.setIsVideoCall(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
    entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
    entity.setDuration(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
  }

  /**
   * @inheritdoc
   */
  @Override
  protected Long updateKeyAfterInsert(RestCallRow_ entity, long rowId) {
    entity.setId(rowId);
    return rowId;
  }

  /**
   * @inheritdoc
   */
  @Override
  public Long getKey(RestCallRow_ entity) {
    if (entity != null) {
      return entity.getId();
    } else {
      return null;
    }
  }

  /**
   * @inheritdoc
   */
  @Override
  protected boolean isEntityUpdateable() {
    return true;
  }

}
