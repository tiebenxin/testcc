package com.lensim.fingerchat.hexmeet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "REST_MEETING_".
 */
public class RestMeeting_Dao extends AbstractDao<RestMeeting_, Long> {

  public static final String TABLENAME = "REST_MEETING_";

  /**
   * Properties of entity RestMeeting_.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {

    public final static Property Id = new Property(0, Long.class, "id", true, "_id");
    public final static Property Name = new Property(1, String.class, "name", false, "NAME");
    public final static Property StartTime = new Property(2, Long.class, "startTime", false, "START_TIME");
    public final static Property Duration = new Property(3, Long.class, "duration", false, "DURATION");
    public final static Property ApplicantId = new Property(4, long.class, "applicantId", false, "APPLICANT_ID");
    public final static Property MasterEndpointId = new Property(5, Integer.class, "masterEndpointId", false, "MASTER_ENDPOINT_ID");
    public final static Property MasterEndpointName = new Property(6, String.class, "masterEndpointName", false, "MASTER_ENDPOINT_NAME");
    public final static Property Layout = new Property(7, String.class, "layout", false, "LAYOUT");
    public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
    public final static Property AutoRedialing = new Property(9, Boolean.class, "autoRedialing", false, "AUTO_REDIALING");
    public final static Property ConfPassword = new Property(10, String.class, "confPassword", false, "CONF_PASSWORD");
    public final static Property NumericId = new Property(11, Integer.class, "numericId", false, "NUMERIC_ID");
    public final static Property ConfTemplate = new Property(12, Boolean.class, "confTemplate", false, "CONF_TEMPLATE");
    public final static Property PrivateTemplate = new Property(13, Boolean.class, "privateTemplate", false, "PRIVATE_TEMPLATE");
    public final static Property StatusInfo = new Property(14, String.class, "statusInfo", false, "STATUS_INFO");
    public final static Property GroupId = new Property(15, Integer.class, "groupId", false, "GROUP_ID");
    public final static Property GroupName = new Property(16, String.class, "groupName", false, "GROUP_NAME");
    public final static Property ConfType = new Property(17, String.class, "confType", false, "CONF_TYPE");
    public final static Property Remarks = new Property(18, String.class, "remarks", false, "REMARKS");
    public final static Property UnitId = new Property(19, Integer.class, "unitId", false, "UNIT_ID");
    public final static Property UnitName = new Property(20, String.class, "unitName", false, "UNIT_NAME");
    public final static Property DepartmentId = new Property(21, Integer.class, "departmentId", false, "DEPARTMENT_ID");
    public final static Property DepartName = new Property(22, String.class, "departName", false, "DEPART_NAME");
    public final static Property Contact = new Property(23, String.class, "contact", false, "CONTACT");
    public final static Property ContactPhone = new Property(24, String.class, "contactPhone", false, "CONTACT_PHONE");
    public final static Property MaxBandwidth = new Property(25, Integer.class, "maxBandwidth", false, "MAX_BANDWIDTH");
    public final static Property EnableRecording = new Property(26, Boolean.class, "enableRecording", false, "ENABLE_RECORDING");
    public final static Property MessageOverlayEnabled = new Property(27, Boolean.class, "messageOverlayEnabled", false, "MESSAGE_OVERLAY_ENABLED");
    public final static Property MessageOverlayContent = new Property(28, String.class, "messageOverlayContent", false, "MESSAGE_OVERLAY_CONTENT");
    public final static Property MessageOverlayDisplayDuration = new Property(29, Integer.class, "messageOverlayDisplayDuration", false, "MESSAGE_OVERLAY_DISPLAY_DURATION");
    public final static Property MessageOverlayTransparency = new Property(30, Integer.class, "messageOverlayTransparency", false, "MESSAGE_OVERLAY_TRANSPARENCY");
    public final static Property MessageOverlaySpeed = new Property(31, String.class, "messageOverlaySpeed", false, "MESSAGE_OVERLAY_SPEED");
    public final static Property MessageOverlayColor = new Property(32, String.class, "messageOverlayColor", false, "MESSAGE_OVERLAY_COLOR");
    public final static Property MessageOverlayFontSize = new Property(33, String.class, "messageOverlayFontSize", false, "MESSAGE_OVERLAY_FONT_SIZE");
    public final static Property MessageOverlayPosition = new Property(34, String.class, "messageOverlayPosition", false, "MESSAGE_OVERLAY_POSITION");
    public final static Property LastModifiedTime = new Property(35, Long.class, "lastModifiedTime", false, "LAST_MODIFIED_TIME");
  }

  ;

  private DaoSession daoSession;


  public RestMeeting_Dao(DaoConfig config) {
    super(config);
  }

  public RestMeeting_Dao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
    this.daoSession = daoSession;
  }

  /**
   * Creates the underlying database table.
   */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"REST_MEETING_\" (" + //
        "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
        "\"NAME\" TEXT," + // 1: name
        "\"START_TIME\" INTEGER," + // 2: startTime
        "\"DURATION\" INTEGER," + // 3: duration
        "\"APPLICANT_ID\" INTEGER NOT NULL ," + // 4: applicantId
        "\"MASTER_ENDPOINT_ID\" INTEGER," + // 5: masterEndpointId
        "\"MASTER_ENDPOINT_NAME\" TEXT," + // 6: masterEndpointName
        "\"LAYOUT\" TEXT," + // 7: layout
        "\"STATUS\" TEXT," + // 8: status
        "\"AUTO_REDIALING\" INTEGER," + // 9: autoRedialing
        "\"CONF_PASSWORD\" TEXT," + // 10: confPassword
        "\"NUMERIC_ID\" INTEGER," + // 11: numericId
        "\"CONF_TEMPLATE\" INTEGER," + // 12: confTemplate
        "\"PRIVATE_TEMPLATE\" INTEGER," + // 13: privateTemplate
        "\"STATUS_INFO\" TEXT," + // 14: statusInfo
        "\"GROUP_ID\" INTEGER," + // 15: groupId
        "\"GROUP_NAME\" TEXT," + // 16: groupName
        "\"CONF_TYPE\" TEXT," + // 17: confType
        "\"REMARKS\" TEXT," + // 18: remarks
        "\"UNIT_ID\" INTEGER," + // 19: unitId
        "\"UNIT_NAME\" TEXT," + // 20: unitName
        "\"DEPARTMENT_ID\" INTEGER," + // 21: departmentId
        "\"DEPART_NAME\" TEXT," + // 22: departName
        "\"CONTACT\" TEXT," + // 23: contact
        "\"CONTACT_PHONE\" TEXT," + // 24: contactPhone
        "\"MAX_BANDWIDTH\" INTEGER," + // 25: maxBandwidth
        "\"ENABLE_RECORDING\" INTEGER," + // 26: enableRecording
        "\"MESSAGE_OVERLAY_ENABLED\" INTEGER," + // 27: messageOverlayEnabled
        "\"MESSAGE_OVERLAY_CONTENT\" TEXT," + // 28: messageOverlayContent
        "\"MESSAGE_OVERLAY_DISPLAY_DURATION\" INTEGER," + // 29: messageOverlayDisplayDuration
        "\"MESSAGE_OVERLAY_TRANSPARENCY\" INTEGER," + // 30: messageOverlayTransparency
        "\"MESSAGE_OVERLAY_SPEED\" TEXT," + // 31: messageOverlaySpeed
        "\"MESSAGE_OVERLAY_COLOR\" TEXT," + // 32: messageOverlayColor
        "\"MESSAGE_OVERLAY_FONT_SIZE\" TEXT," + // 33: messageOverlayFontSize
        "\"MESSAGE_OVERLAY_POSITION\" TEXT," + // 34: messageOverlayPosition
        "\"LAST_MODIFIED_TIME\" INTEGER);"); // 35: lastModifiedTime
  }

  /**
   * Drops the underlying database table.
   */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REST_MEETING_\"";
    db.execSQL(sql);
  }

  /**
   * @inheritdoc
   */
  @Override
  protected void bindValues(SQLiteStatement stmt, RestMeeting_ entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }

    String name = entity.getName();
    if (name != null) {
      stmt.bindString(2, name);
    }

    Long startTime = entity.getStartTime();
    if (startTime != null) {
      stmt.bindLong(3, startTime);
    }

    Long duration = entity.getDuration();
    if (duration != null) {
      stmt.bindLong(4, duration);
    }
    stmt.bindLong(5, entity.getApplicantId());

    Integer masterEndpointId = entity.getMasterEndpointId();
    if (masterEndpointId != null) {
      stmt.bindLong(6, masterEndpointId);
    }

    String masterEndpointName = entity.getMasterEndpointName();
    if (masterEndpointName != null) {
      stmt.bindString(7, masterEndpointName);
    }

    String layout = entity.getLayout();
    if (layout != null) {
      stmt.bindString(8, layout);
    }

    String status = entity.getStatus();
    if (status != null) {
      stmt.bindString(9, status);
    }

    Boolean autoRedialing = entity.getAutoRedialing();
    if (autoRedialing != null) {
      stmt.bindLong(10, autoRedialing ? 1L : 0L);
    }

    String confPassword = entity.getConfPassword();
    if (confPassword != null) {
      stmt.bindString(11, confPassword);
    }

    Integer numericId = entity.getNumericId();
    if (numericId != null) {
      stmt.bindLong(12, numericId);
    }

    Boolean confTemplate = entity.getConfTemplate();
    if (confTemplate != null) {
      stmt.bindLong(13, confTemplate ? 1L : 0L);
    }

    Boolean privateTemplate = entity.getPrivateTemplate();
    if (privateTemplate != null) {
      stmt.bindLong(14, privateTemplate ? 1L : 0L);
    }

    String statusInfo = entity.getStatusInfo();
    if (statusInfo != null) {
      stmt.bindString(15, statusInfo);
    }

    Integer groupId = entity.getGroupId();
    if (groupId != null) {
      stmt.bindLong(16, groupId);
    }

    String groupName = entity.getGroupName();
    if (groupName != null) {
      stmt.bindString(17, groupName);
    }

    String confType = entity.getConfType();
    if (confType != null) {
      stmt.bindString(18, confType);
    }

    String remarks = entity.getRemarks();
    if (remarks != null) {
      stmt.bindString(19, remarks);
    }

    Integer unitId = entity.getUnitId();
    if (unitId != null) {
      stmt.bindLong(20, unitId);
    }

    String unitName = entity.getUnitName();
    if (unitName != null) {
      stmt.bindString(21, unitName);
    }

    Integer departmentId = entity.getDepartmentId();
    if (departmentId != null) {
      stmt.bindLong(22, departmentId);
    }

    String departName = entity.getDepartName();
    if (departName != null) {
      stmt.bindString(23, departName);
    }

    String contact = entity.getContact();
    if (contact != null) {
      stmt.bindString(24, contact);
    }

    String contactPhone = entity.getContactPhone();
    if (contactPhone != null) {
      stmt.bindString(25, contactPhone);
    }

    Integer maxBandwidth = entity.getMaxBandwidth();
    if (maxBandwidth != null) {
      stmt.bindLong(26, maxBandwidth);
    }

    Boolean enableRecording = entity.getEnableRecording();
    if (enableRecording != null) {
      stmt.bindLong(27, enableRecording ? 1L : 0L);
    }

    Boolean messageOverlayEnabled = entity.getMessageOverlayEnabled();
    if (messageOverlayEnabled != null) {
      stmt.bindLong(28, messageOverlayEnabled ? 1L : 0L);
    }

    String messageOverlayContent = entity.getMessageOverlayContent();
    if (messageOverlayContent != null) {
      stmt.bindString(29, messageOverlayContent);
    }

    Integer messageOverlayDisplayDuration = entity.getMessageOverlayDisplayDuration();
    if (messageOverlayDisplayDuration != null) {
      stmt.bindLong(30, messageOverlayDisplayDuration);
    }

    Integer messageOverlayTransparency = entity.getMessageOverlayTransparency();
    if (messageOverlayTransparency != null) {
      stmt.bindLong(31, messageOverlayTransparency);
    }

    String messageOverlaySpeed = entity.getMessageOverlaySpeed();
    if (messageOverlaySpeed != null) {
      stmt.bindString(32, messageOverlaySpeed);
    }

    String messageOverlayColor = entity.getMessageOverlayColor();
    if (messageOverlayColor != null) {
      stmt.bindString(33, messageOverlayColor);
    }

    String messageOverlayFontSize = entity.getMessageOverlayFontSize();
    if (messageOverlayFontSize != null) {
      stmt.bindString(34, messageOverlayFontSize);
    }

    String messageOverlayPosition = entity.getMessageOverlayPosition();
    if (messageOverlayPosition != null) {
      stmt.bindString(35, messageOverlayPosition);
    }

    Long lastModifiedTime = entity.getLastModifiedTime();
    if (lastModifiedTime != null) {
      stmt.bindLong(36, lastModifiedTime);
    }
  }

  @Override
  protected void attachEntity(RestMeeting_ entity) {
    super.attachEntity(entity);
    entity.__setDaoSession(daoSession);
  }

  /**
   * @inheritdoc
   */
  @Override
  public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  /**
   * @inheritdoc
   */
  @Override
  public RestMeeting_ readEntity(Cursor cursor, int offset) {
    RestMeeting_ entity = new RestMeeting_( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
        cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // startTime
        cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // duration
        cursor.getLong(offset + 4), // applicantId
        cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // masterEndpointId
        cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // masterEndpointName
        cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // layout
        cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // status
        cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // autoRedialing
        cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // confPassword
        cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // numericId
        cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // confTemplate
        cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // privateTemplate
        cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // statusInfo
        cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // groupId
        cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // groupName
        cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // confType
        cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // remarks
        cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // unitId
        cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // unitName
        cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // departmentId
        cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // departName
        cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // contact
        cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // contactPhone
        cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // maxBandwidth
        cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // enableRecording
        cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0, // messageOverlayEnabled
        cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // messageOverlayContent
        cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // messageOverlayDisplayDuration
        cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // messageOverlayTransparency
        cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // messageOverlaySpeed
        cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // messageOverlayColor
        cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // messageOverlayFontSize
        cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // messageOverlayPosition
        cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35) // lastModifiedTime
    );
    return entity;
  }

  /**
   * @inheritdoc
   */
  @Override
  public void readEntity(Cursor cursor, RestMeeting_ entity, int offset) {
    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
    entity.setDuration(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
    entity.setApplicantId(cursor.getLong(offset + 4));
    entity.setMasterEndpointId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
    entity.setMasterEndpointName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    entity.setLayout(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
    entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
    entity.setAutoRedialing(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
    entity.setConfPassword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
    entity.setNumericId(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
    entity.setConfTemplate(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
    entity.setPrivateTemplate(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
    entity.setStatusInfo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
    entity.setGroupId(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
    entity.setGroupName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
    entity.setConfType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
    entity.setRemarks(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
    entity.setUnitId(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
    entity.setUnitName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
    entity.setDepartmentId(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
    entity.setDepartName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
    entity.setContact(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
    entity.setContactPhone(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
    entity.setMaxBandwidth(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
    entity.setEnableRecording(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
    entity.setMessageOverlayEnabled(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
    entity.setMessageOverlayContent(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
    entity.setMessageOverlayDisplayDuration(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
    entity.setMessageOverlayTransparency(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
    entity.setMessageOverlaySpeed(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
    entity.setMessageOverlayColor(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
    entity.setMessageOverlayFontSize(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
    entity.setMessageOverlayPosition(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
    entity.setLastModifiedTime(cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35));
  }

  /**
   * @inheritdoc
   */
  @Override
  protected Long updateKeyAfterInsert(RestMeeting_ entity, long rowId) {
    entity.setId(rowId);
    return rowId;
  }

  /**
   * @inheritdoc
   */
  @Override
  public Long getKey(RestMeeting_ entity) {
    if (entity != null) {
      return entity.getId();
    } else {
      return null;
    }
  }

  /**
   * @inheritdoc
   */
  @Override
  protected boolean isEntityUpdateable() {
    return true;
  }

  private String selectDeep;

  protected String getSelectDeep() {
    if (selectDeep == null) {
      StringBuilder builder = new StringBuilder("SELECT ");
      SqlUtils.appendColumns(builder, "T", getAllColumns());
      builder.append(',');
      SqlUtils.appendColumns(builder, "T0", daoSession.getRestUser_Dao().getAllColumns());
      builder.append(" FROM REST_MEETING_ T");
      builder.append(" LEFT JOIN REST_USER_ T0 ON T.\"APPLICANT_ID\"=T0.\"_id\"");
      builder.append(' ');
      selectDeep = builder.toString();
    }
    return selectDeep;
  }

  protected RestMeeting_ loadCurrentDeep(Cursor cursor, boolean lock) {
    RestMeeting_ entity = loadCurrent(cursor, 0, lock);
    int offset = getAllColumns().length;

    RestUser_ applicant = loadCurrentOther(daoSession.getRestUser_Dao(), cursor, offset);
    if (applicant != null) {
      entity.setApplicant(applicant);
    }

    return entity;
  }

  public RestMeeting_ loadDeep(Long key) {
    assertSinglePk();
    if (key == null) {
      return null;
    }

    StringBuilder builder = new StringBuilder(getSelectDeep());
    builder.append("WHERE ");
    SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
    String sql = builder.toString();

    String[] keyArray = new String[]{key.toString()};
    Cursor cursor = db.rawQuery(sql, keyArray);

    try {
      boolean available = cursor.moveToFirst();
      if (!available) {
        return null;
      } else if (!cursor.isLast()) {
        throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
      }
      return loadCurrentDeep(cursor, true);
    } finally {
      cursor.close();
    }
  }

  /**
   * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
   */
  public List<RestMeeting_> loadAllDeepFromCursor(Cursor cursor) {
    int count = cursor.getCount();
    List<RestMeeting_> list = new ArrayList<RestMeeting_>(count);

    if (cursor.moveToFirst()) {
      if (identityScope != null) {
        identityScope.lock();
        identityScope.reserveRoom(count);
      }
      try {
        do {
          list.add(loadCurrentDeep(cursor, false));
        } while (cursor.moveToNext());
      } finally {
        if (identityScope != null) {
          identityScope.unlock();
        }
      }
    }
    return list;
  }

  protected List<RestMeeting_> loadDeepAllAndCloseCursor(Cursor cursor) {
    try {
      return loadAllDeepFromCursor(cursor);
    } finally {
      cursor.close();
    }
  }


  /**
   * A raw-style query where you can pass any WHERE clause and arguments.
   */
  public List<RestMeeting_> queryDeep(String where, String... selectionArg) {
    Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
    return loadDeepAllAndCloseCursor(cursor);
  }

}
