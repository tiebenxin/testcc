package com.lensim.fingerchat.hexmeet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "REST_ENDPOINT_".
 */
public class RestEndpoint_Dao extends AbstractDao<RestEndpoint_, Long> {

  public static final String TABLENAME = "REST_ENDPOINT_";

  /**
   * Properties of entity RestEndpoint_.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {

    public final static Property Id = new Property(0, Long.class, "id", true, "_id");
    public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
    public final static Property Name = new Property(2, String.class, "name", false, "NAME");
    public final static Property Ip = new Property(3, String.class, "ip", false, "IP");
    public final static Property Available = new Property(4, Boolean.class, "available", false, "AVAILABLE");
    public final static Property OrgId = new Property(5, Integer.class, "orgId", false, "ORG_ID");
    public final static Property OrgName = new Property(6, String.class, "orgName", false, "ORG_NAME");
    public final static Property UnitId = new Property(7, Integer.class, "unitId", false, "UNIT_ID");
    public final static Property UnitName = new Property(8, String.class, "unitName", false, "UNIT_NAME");
    public final static Property InPrimaryVS = new Property(9, Boolean.class, "inPrimaryVS", false, "IN_PRIMARY_VS");
    public final static Property PrimaryVSSortIndex = new Property(10, Integer.class, "primaryVSSortIndex", false, "PRIMARY_VSSORT_INDEX");
    public final static Property InSecondaryVS = new Property(11, Boolean.class, "inSecondaryVS", false, "IN_SECONDARY_VS");
    public final static Property SecondaryVSSortIndex = new Property(12, Integer.class, "secondaryVSSortIndex", false, "SECONDARY_VSSORT_INDEX");
    public final static Property SortIndex = new Property(13, Integer.class, "sortIndex", false, "SORT_INDEX");
    public final static Property E164 = new Property(14, String.class, "e164", false, "E164");
    public final static Property CallType = new Property(15, String.class, "callType", false, "CALL_TYPE");
    public final static Property CallNumber = new Property(16, String.class, "callNumber", false, "CALL_NUMBER");
    public final static Property OutwardType = new Property(17, String.class, "outwardType", false, "OUTWARD_TYPE");
    public final static Property Master = new Property(18, Boolean.class, "master", false, "MASTER");
    public final static Property SipUrl = new Property(19, String.class, "sipUrl", false, "SIP_URL");
    public final static Property DeviceStatus = new Property(20, String.class, "deviceStatus", false, "DEVICE_STATUS");
    public final static Property AdminId = new Property(21, String.class, "adminId", false, "ADMIN_ID");
    public final static Property AdminPassword = new Property(22, String.class, "adminPassword", false, "ADMIN_PASSWORD");
    public final static Property DeviceName = new Property(23, String.class, "deviceName", false, "DEVICE_NAME");
    public final static Property Description = new Property(24, String.class, "description", false, "DESCRIPTION");
    public final static Property SerialNumber = new Property(25, String.class, "serialNumber", false, "SERIAL_NUMBER");
    public final static Property SoftwareVersion = new Property(26, String.class, "softwareVersion", false, "SOFTWARE_VERSION");
    public final static Property CallSpeed = new Property(27, Integer.class, "callSpeed", false, "CALL_SPEED");
    public final static Property Contact = new Property(28, String.class, "contact", false, "CONTACT");
    public final static Property ContactEmail = new Property(29, String.class, "contactEmail", false, "CONTACT_EMAIL");
    public final static Property ContactPhone = new Property(30, String.class, "contactPhone", false, "CONTACT_PHONE");
    public final static Property UserCapacity = new Property(31, Integer.class, "userCapacity", false, "USER_CAPACITY");
    public final static Property ImageURL = new Property(32, String.class, "imageURL", false, "IMAGE_URL");
  }

  ;


  public RestEndpoint_Dao(DaoConfig config) {
    super(config);
  }

  public RestEndpoint_Dao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
  }

  /**
   * Creates the underlying database table.
   */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"REST_ENDPOINT_\" (" + //
        "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
        "\"TYPE\" TEXT," + // 1: type
        "\"NAME\" TEXT," + // 2: name
        "\"IP\" TEXT," + // 3: ip
        "\"AVAILABLE\" INTEGER," + // 4: available
        "\"ORG_ID\" INTEGER," + // 5: orgId
        "\"ORG_NAME\" TEXT," + // 6: orgName
        "\"UNIT_ID\" INTEGER," + // 7: unitId
        "\"UNIT_NAME\" TEXT," + // 8: unitName
        "\"IN_PRIMARY_VS\" INTEGER," + // 9: inPrimaryVS
        "\"PRIMARY_VSSORT_INDEX\" INTEGER," + // 10: primaryVSSortIndex
        "\"IN_SECONDARY_VS\" INTEGER," + // 11: inSecondaryVS
        "\"SECONDARY_VSSORT_INDEX\" INTEGER," + // 12: secondaryVSSortIndex
        "\"SORT_INDEX\" INTEGER," + // 13: sortIndex
        "\"E164\" TEXT," + // 14: e164
        "\"CALL_TYPE\" TEXT," + // 15: callType
        "\"CALL_NUMBER\" TEXT," + // 16: callNumber
        "\"OUTWARD_TYPE\" TEXT," + // 17: outwardType
        "\"MASTER\" INTEGER," + // 18: master
        "\"SIP_URL\" TEXT," + // 19: sipUrl
        "\"DEVICE_STATUS\" TEXT," + // 20: deviceStatus
        "\"ADMIN_ID\" TEXT," + // 21: adminId
        "\"ADMIN_PASSWORD\" TEXT," + // 22: adminPassword
        "\"DEVICE_NAME\" TEXT," + // 23: deviceName
        "\"DESCRIPTION\" TEXT," + // 24: description
        "\"SERIAL_NUMBER\" TEXT," + // 25: serialNumber
        "\"SOFTWARE_VERSION\" TEXT," + // 26: softwareVersion
        "\"CALL_SPEED\" INTEGER," + // 27: callSpeed
        "\"CONTACT\" TEXT," + // 28: contact
        "\"CONTACT_EMAIL\" TEXT," + // 29: contactEmail
        "\"CONTACT_PHONE\" TEXT," + // 30: contactPhone
        "\"USER_CAPACITY\" INTEGER," + // 31: userCapacity
        "\"IMAGE_URL\" TEXT);"); // 32: imageURL
  }

  /**
   * Drops the underlying database table.
   */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REST_ENDPOINT_\"";
    db.execSQL(sql);
  }

  /**
   * @inheritdoc
   */
  @Override
  protected void bindValues(SQLiteStatement stmt, RestEndpoint_ entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }

    String type = entity.getType();
    if (type != null) {
      stmt.bindString(2, type);
    }

    String name = entity.getName();
    if (name != null) {
      stmt.bindString(3, name);
    }

    String ip = entity.getIp();
    if (ip != null) {
      stmt.bindString(4, ip);
    }

    Boolean available = entity.getAvailable();
    if (available != null) {
      stmt.bindLong(5, available ? 1L : 0L);
    }

    Integer orgId = entity.getOrgId();
    if (orgId != null) {
      stmt.bindLong(6, orgId);
    }

    String orgName = entity.getOrgName();
    if (orgName != null) {
      stmt.bindString(7, orgName);
    }

    Integer unitId = entity.getUnitId();
    if (unitId != null) {
      stmt.bindLong(8, unitId);
    }

    String unitName = entity.getUnitName();
    if (unitName != null) {
      stmt.bindString(9, unitName);
    }

    Boolean inPrimaryVS = entity.getInPrimaryVS();
    if (inPrimaryVS != null) {
      stmt.bindLong(10, inPrimaryVS ? 1L : 0L);
    }

    Integer primaryVSSortIndex = entity.getPrimaryVSSortIndex();
    if (primaryVSSortIndex != null) {
      stmt.bindLong(11, primaryVSSortIndex);
    }

    Boolean inSecondaryVS = entity.getInSecondaryVS();
    if (inSecondaryVS != null) {
      stmt.bindLong(12, inSecondaryVS ? 1L : 0L);
    }

    Integer secondaryVSSortIndex = entity.getSecondaryVSSortIndex();
    if (secondaryVSSortIndex != null) {
      stmt.bindLong(13, secondaryVSSortIndex);
    }

    Integer sortIndex = entity.getSortIndex();
    if (sortIndex != null) {
      stmt.bindLong(14, sortIndex);
    }

    String e164 = entity.getE164();
    if (e164 != null) {
      stmt.bindString(15, e164);
    }

    String callType = entity.getCallType();
    if (callType != null) {
      stmt.bindString(16, callType);
    }

    String callNumber = entity.getCallNumber();
    if (callNumber != null) {
      stmt.bindString(17, callNumber);
    }

    String outwardType = entity.getOutwardType();
    if (outwardType != null) {
      stmt.bindString(18, outwardType);
    }

    Boolean master = entity.getMaster();
    if (master != null) {
      stmt.bindLong(19, master ? 1L : 0L);
    }

    String sipUrl = entity.getSipUrl();
    if (sipUrl != null) {
      stmt.bindString(20, sipUrl);
    }

    String deviceStatus = entity.getDeviceStatus();
    if (deviceStatus != null) {
      stmt.bindString(21, deviceStatus);
    }

    String adminId = entity.getAdminId();
    if (adminId != null) {
      stmt.bindString(22, adminId);
    }

    String adminPassword = entity.getAdminPassword();
    if (adminPassword != null) {
      stmt.bindString(23, adminPassword);
    }

    String deviceName = entity.getDeviceName();
    if (deviceName != null) {
      stmt.bindString(24, deviceName);
    }

    String description = entity.getDescription();
    if (description != null) {
      stmt.bindString(25, description);
    }

    String serialNumber = entity.getSerialNumber();
    if (serialNumber != null) {
      stmt.bindString(26, serialNumber);
    }

    String softwareVersion = entity.getSoftwareVersion();
    if (softwareVersion != null) {
      stmt.bindString(27, softwareVersion);
    }

    Integer callSpeed = entity.getCallSpeed();
    if (callSpeed != null) {
      stmt.bindLong(28, callSpeed);
    }

    String contact = entity.getContact();
    if (contact != null) {
      stmt.bindString(29, contact);
    }

    String contactEmail = entity.getContactEmail();
    if (contactEmail != null) {
      stmt.bindString(30, contactEmail);
    }

    String contactPhone = entity.getContactPhone();
    if (contactPhone != null) {
      stmt.bindString(31, contactPhone);
    }

    Integer userCapacity = entity.getUserCapacity();
    if (userCapacity != null) {
      stmt.bindLong(32, userCapacity);
    }

    String imageURL = entity.getImageURL();
    if (imageURL != null) {
      stmt.bindString(33, imageURL);
    }
  }

  /**
   * @inheritdoc
   */
  @Override
  public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  /**
   * @inheritdoc
   */
  @Override
  public RestEndpoint_ readEntity(Cursor cursor, int offset) {
    RestEndpoint_ entity = new RestEndpoint_( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
        cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ip
        cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // available
        cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // orgId
        cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orgName
        cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // unitId
        cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // unitName
        cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // inPrimaryVS
        cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // primaryVSSortIndex
        cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // inSecondaryVS
        cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // secondaryVSSortIndex
        cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // sortIndex
        cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // e164
        cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // callType
        cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // callNumber
        cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // outwardType
        cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // master
        cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // sipUrl
        cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // deviceStatus
        cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // adminId
        cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // adminPassword
        cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // deviceName
        cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // description
        cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // serialNumber
        cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // softwareVersion
        cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // callSpeed
        cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // contact
        cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // contactEmail
        cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // contactPhone
        cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // userCapacity
        cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // imageURL
    );
    return entity;
  }

  /**
   * @inheritdoc
   */
  @Override
  public void readEntity(Cursor cursor, RestEndpoint_ entity, int offset) {
    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    entity.setIp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    entity.setAvailable(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
    entity.setOrgId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
    entity.setOrgName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    entity.setUnitId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
    entity.setUnitName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
    entity.setInPrimaryVS(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
    entity.setPrimaryVSSortIndex(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
    entity.setInSecondaryVS(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
    entity.setSecondaryVSSortIndex(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
    entity.setSortIndex(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
    entity.setE164(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
    entity.setCallType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
    entity.setCallNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
    entity.setOutwardType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
    entity.setMaster(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
    entity.setSipUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
    entity.setDeviceStatus(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
    entity.setAdminId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
    entity.setAdminPassword(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
    entity.setDeviceName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
    entity.setDescription(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
    entity.setSerialNumber(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
    entity.setSoftwareVersion(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
    entity.setCallSpeed(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
    entity.setContact(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
    entity.setContactEmail(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
    entity.setContactPhone(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
    entity.setUserCapacity(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
    entity.setImageURL(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
  }

  /**
   * @inheritdoc
   */
  @Override
  protected Long updateKeyAfterInsert(RestEndpoint_ entity, long rowId) {
    entity.setId(rowId);
    return rowId;
  }

  /**
   * @inheritdoc
   */
  @Override
  public Long getKey(RestEndpoint_ entity) {
    if (entity != null) {
      return entity.getId();
    } else {
      return null;
    }
  }

  /**
   * @inheritdoc
   */
  @Override
  protected boolean isEntityUpdateable() {
    return true;
  }

}
